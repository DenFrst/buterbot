import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from g4f.Provider import RetryProvider
from g4f import Provider, models
import g4f
import warnings
import os
import logging
from flask import Flask
from threading import Thread
from datetime import datetime, timezone
import pytz
import signal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask –¥–ª—è –ø–∏–Ω–≥–æ–≤
app = Flask(__name__)

@app.route('/')
def home(): return "Bot is alive!"
def run_flask(): app.run(host='0.0.0.0', port=5000)
def keep_alive(): Thread(target=run_flask).start()
keep_alive()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

os.environ['DISABLE_OPENAI_BROWSER'] = 'true'
os.environ['G4F_NO_BROWSER'] = 'true'
warnings.filterwarnings("ignore")
g4f.debug.logging = False
g4f.check_version = False
g4f.debug.version_check = False

API_TOKEN = os.getenv('TELEGRAM_TOKEN')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
previous_breakfasts = {}
MODELS = [g4f.models.gpt_4o_mini, g4f.models.deepseek_r1, g4f.models.o3_mini, g4f.models.gpt_4, g4f.models.gpt_4_1_mini]
current_model_index = 0
feedback_data = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤

def check_working_hours():
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è"""
    tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz)
    work_hours = (
        (5 <= now.hour < 14)    # 08:00-17:00 –ú–°–ö (UTC+3)
        or 
        (21 <= now.hour <= 23)  # 00:00-02:00 –ú–°–ö
    )
    if not work_hours:
        logger.info("üõë –ó–∞–∫—Ä—ã–≤–∞—é—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∏–Ω–≥–∞")
        os._exit(0)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (8:00-22:00 –ø–æ –ú–°–ö)
def is_working_time():
    tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz)
    is_active = (5 <= now.hour < 14) or (21 <= now.hour <= 23) or (0 <= now.hour < 2)
    
    if not is_active:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É (–Ω–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è)")
        os._exit(0)
    return True


async def generate_with_timeout(prompt, timeout=20):
    global current_model_index
    model = MODELS[current_model_index]
    
    for attempt in range(5):
        try:
            response = await asyncio.wait_for(
                g4f.ChatCompletion.create_async(
                    model=model,
                    messages=[{"role": "user", "content": prompt}],
                    timeout=timeout
                ),
                timeout=timeout
            )
            logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model}")
            return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {str(e)}")
            current_model_index = (current_model_index + 1) % len(MODELS)
            model = MODELS[current_model_index]
            await asyncio.sleep(1 if attempt == 0 else 0)

async def generate_breakfasts(user_id):
    if not is_working_time():
        return ["–ë–æ—Ç —Å–ø–∏—Ç (8:00-22:00 –ú–°–ö)"] * 6

    try:
        last_breakfasts = previous_breakfasts.get(user_id, [])
        prompt = "–ù–∞–ø–∏—à–∏ 6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–≤—Ç—Ä–∞–∫–æ–≤, —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã"
        if last_breakfasts:
            prompt += f", –∏—Å–∫–ª—é—á–∞—è: {', '.join(last_breakfasts)}"
        
        response = await generate_with_timeout(prompt)
        new_breakfasts = [b.strip() for b in response.split(',')[:6]]
        previous_breakfasts[user_id] = new_breakfasts
        return new_breakfasts
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤—Ç—Ä–∞–∫–æ–≤: {str(e)}")
        defaults = ["–û–º–ª–µ—Ç", "–ì—Ä–∞–Ω–æ–ª–∞", "–¢–æ—Å—Ç—ã —Å –∞–≤–æ–∫–∞–¥–æ", "–°–º—É–∑–∏-–±–æ—É–ª", "–û–≤—Å—è–Ω–∫–∞", "–°—ã—Ä–Ω–∏–∫–∏"]
        return [b for b in defaults if b not in last_breakfasts][:6] or defaults[:6]

async def generate_recipe(breakfast_name):
    if not is_working_time():
        return "–ë–æ—Ç –æ—Ç–¥—ã—Ö–∞–µ—Ç —Å 22:00 –¥–æ 8:00 –ú–°–ö üò¥"

    try:
        return await generate_with_timeout(f"–ù–∞–ø–∏—à–∏ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è {breakfast_name} –ø—É–Ω–∫—Ç—ã –∫–æ—Ä–æ—Ç–∫–æ –∏ —è—Å–Ω–æ, –ø–∏—à–∏ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫—É—Ä—Å–∏–≤–∞ –∏ \"###\" –∏ –∂–∏—Ä–Ω–æ–≥–æ \"**\" (–±–µ–∑ markdown –∏–ª–∏ html –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è) ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {str(e)}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(chat_id):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üç≥ –í—ã–±—Ä–∞—Ç—å –∑–∞–≤—Ç—Ä–∞–∫",
        callback_data="generate"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
        callback_data="feedback"
    ))
    await bot.send_message(
        chat_id,
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–≤—Ç—Ä–∞–∫–∞:",
        reply_markup=builder.as_markup()
    )

@dp.message(Command('start'))
async def send_welcome(message: types.Message):
    if not is_working_time():
        await message.answer("‚è≥ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 5:00-14:00 –∏ 21:00-2:00 –ø–æ –ú–°–ö!")
        return
    await show_main_menu(message.chat.id)
    
@dp.callback_query(lambda c: c.data == "main_menu")
async def back_to_menu(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await show_main_menu(callback_query.message.chat.id)
    
@dp.callback_query(lambda c: c.data == "feedback")
async def ask_feedback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:",
        reply_markup=InlineKeyboardBuilder()
            .add(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
            .as_markup()
    )
    feedback_data[callback_query.from_user.id] = True

@dp.message(lambda message: message.from_user.id in feedback_data)
async def save_feedback(message: types.Message):
    user_id = message.from_user.id
    feedback = message.text
    logger.info(f"–û—Ç–∑—ã–≤ –æ—Ç {user_id}: {feedback}")
    del feedback_data[user_id]
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=InlineKeyboardBuilder()
        .add(types.InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="main_menu"))
        .as_markup())

@dp.callback_query(lambda c: c.data == "generate")
async def process_callback(callback_query: types.CallbackQuery):
    if not is_working_time():
        await callback_query.answer("–ë–æ—Ç —Å–ø–∏—Ç üò¥", show_alert=True)
        return

    await callback_query.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≤—Ç—Ä–∞–∫–æ–≤...")
    loading_msg = await callback_query.message.answer("üîÑ –ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...")
    breakfasts = await generate_breakfasts(callback_query.from_user.id)
    user_data[callback_query.from_user.id] = breakfasts
    
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=loading_msg.message_id
    )
    
    builder = InlineKeyboardBuilder()
    for i, breakfast in enumerate(breakfasts, 1):
        builder.add(types.InlineKeyboardButton(
            text=f"{i}. {breakfast}",
            callback_data=f"recipe_{i}"
        ))
    builder.add(types.InlineKeyboardButton(
        text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
        callback_data="generate"
    ))
    builder.adjust(2, 2, 2, 1)
    
    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏ –∑–∞–≤—Ç—Ä–∞–∫:\n" + "\n".join(f"{i}. {b}" for i, b in enumerate(breakfasts, 1)),
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data.startswith("recipe_"))
async def show_recipe(callback_query: types.CallbackQuery):
    if not is_working_time():
        await callback_query.answer("–ë–æ—Ç —Å–ø–∏—Ç üò¥", show_alert=True)
        return

    await callback_query.answer("‚è≥ –ì–æ—Ç–æ–≤–∏–º —Ä–µ—Ü–µ–ø—Ç...")
    loading_msg = await callback_query.message.answer("üç≥ –ì–æ—Ç–æ–≤–∏–º —Ä–µ—Ü–µ–ø—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    breakfast_num = int(callback_query.data.split("_")[1]) - 1
    user_id = callback_query.from_user.id
    
    if user_id in user_data and 0 <= breakfast_num < len(user_data[user_id]):
        breakfast_name = user_data[user_id][breakfast_num]
        recipe = await generate_recipe(breakfast_name)
        
        await bot.delete_message(
            chat_id=callback_query.message.chat.id,
            message_id=loading_msg.message_id
        )
        
        builder = InlineKeyboardBuilder()
        for i, breakfast in enumerate(user_data[user_id], 1):
            builder.add(types.InlineKeyboardButton(
                text=f"{i}. {breakfast[:15] + '...' if len(breakfast) > 15 else breakfast}",
                callback_data=f"recipe_{i}"
            ))
        builder.adjust(2, 2, 2)
        
    # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.row(types.InlineKeyboardButton(
        text="üîÑ –ù–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
        callback_data="generate"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üìù –û—Ç–∑—ã–≤",
        callback_data="feedback"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üè† –í –º–µ–Ω—é",
        callback_data="main_menu"
    ))
    
    await callback_query.message.answer(
        f"üç≥ {breakfast_name}\n\n{recipe}",
        reply_markup=builder.as_markup()
    )
        

async def main():
    check_working_hours()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())