import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from g4f.Provider import RetryProvider
from g4f import Provider, models
import g4f
import warnings
import os
import logging
from flask import Flask
from threading import Thread
from datetime import datetime, timezone
import pytz
import signal
import asyncpg

#region –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask –¥–ª—è –ø–∏–Ω–≥–æ–≤
app = Flask(__name__)

@app.route('/')
def home(): return "Bot is alive!"
def run_flask(): app.run(host='0.0.0.0', port=5000)
def keep_alive(): Thread(target=run_flask).start()
keep_alive()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

os.environ['DISABLE_OPENAI_BROWSER'] = 'true'
os.environ['G4F_NO_BROWSER'] = 'true'
warnings.filterwarnings("ignore")
g4f.debug.logging = False
g4f.check_version = False
g4f.debug.version_check = False

API_TOKEN = os.getenv('TELEGRAM_TOKEN')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DB
async def get_db():
    return await asyncpg.connect(os.getenv("DATABASE_URL_FNL"))

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
previous_breakfasts = {}
MODELS = [g4f.models.gpt_4o_mini, g4f.models.deepseek_r1, g4f.models.o3_mini, g4f.models.gpt_4, g4f.models.gpt_4_1_mini]
current_model_index = 0
feedback_data = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
#endregion –ù–∞—Å—Ç—Ä–æ–π–∫–∏

# –ö–Ω–æ–ø–∫–∏ - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(chat_id):
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
    reply_markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üç≥ –í—ã–±—Ä–∞—Ç—å –∑–∞–≤—Ç—Ä–∞–∫–∏"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤")],
            [KeyboardButton(text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"), KeyboardButton(text="üìù –û—Ç–∑—ã–≤")]
        ],
        resize_keyboard=True
    )
    # Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    inline_kb = InlineKeyboardBuilder()
    inline_kb.add(types.InlineKeyboardButton(
        text="–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–≤—Ç—Ä–∞–∫–∏",
        callback_data="allergy_settings"
    ))
    
    await bot.send_message(
        chat_id,
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    #await bot.send_message(
    #    chat_id,
   #     "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:",
   #     reply_markup=inline_kb.as_markup()
   # )

# /Start
@dp.message(Command('start'))
async def send_welcome(message: types.Message):
    await show_main_menu(message.chat.id)


#region –ê–ª–ª–µ–≥–µ–Ω—ã
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /allergy
@dp.message(Command('allergy'))
async def set_allergies(message: types.Message):
    user_id = message.from_user.id
    allergies = message.text.replace('/allergy', '').strip()
    
    if not allergies:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
        await show_allergy_settings(user_id, message)
        return
    
    try:
        conn = await get_db()
        await conn.execute("""
            INSERT INTO user_preferences (user_id, allergies)
            VALUES ($1, $2)
            ON CONFLICT (user_id) DO UPDATE SET allergies = EXCLUDED.allergies
        """, user_id, allergies)
        
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(
            text="‚öôÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            callback_data="show_allergy_settings"
        ))
        
        await message.answer(
            f"‚úÖ <b>–°–ø–∏—Å–æ–∫ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω</b>\n\n"
            f"<code>{allergies}</code>\n\n"
            f"–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –∏—Ö –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if conn: await conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤
@dp.message(lambda msg: msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤")
async def show_allergies_button(message: types.Message):
    await show_allergy_settings(message.from_user.id, message)

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def show_allergy_settings(user_id, message_or_callback):
    conn = await get_db()
    current_allergies = await conn.fetchval(
        "SELECT allergies FROM user_preferences WHERE user_id = $1", 
        user_id
    )
    await conn.close()
    
    builder = InlineKeyboardBuilder()
    if current_allergies:
        builder.row(types.InlineKeyboardButton(
            text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∞–ª–ª–µ—Ä–≥–µ–Ω—ã",
            callback_data="clear_allergies"
        ))
    builder.row(types.InlineKeyboardButton(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫",
        callback_data="edit_allergies"
    ))
    
    text = "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–ª–µ—Ä–≥–µ–Ω–∞–º–∏</b>\n\n"
    if current_allergies:
        text += f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:\n<code>{current_allergies}</code>\n\n"
        text += "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n<code>/allergy –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫</code>"
    else:
        text += "–ê–ª–ª–µ—Ä–≥–µ–Ω—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n\n"
        text += "–î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n<code>/allergy –º–æ–ª–æ–∫–æ, –≥–ª—é—Ç–µ–Ω</code>"
    
    if isinstance(message_or_callback, types.CallbackQuery):
        await message_or_callback.message.edit_text(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    else:
        await message_or_callback.answer(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
@dp.callback_query(lambda c: c.data == "show_allergy_settings")
async def show_settings_callback(callback_query: types.CallbackQuery):
    await show_allergy_settings(callback_query.from_user.id, callback_query)

@dp.callback_query(lambda c: c.data == "clear_allergies")
async def clear_allergies(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        conn = await get_db()
        await conn.execute(
            "UPDATE user_preferences SET allergies = NULL WHERE user_id = $1",
            user_id
        )
        await callback_query.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤ –æ—á–∏—â–µ–Ω")
        await show_allergy_settings(user_id, callback_query)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ")
    finally:
        if conn: await conn.close()

@dp.callback_query(lambda c: c.data == "edit_allergies")
async def edit_allergies(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤</b>\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "<code>/allergy –º–æ–ª–æ–∫–æ, –≥–ª—é—Ç–µ–Ω, –º—ë–¥</code>\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å",
        parse_mode="HTML"
    )
#endregion Allergy

#region –ò–∑–±—Ä–∞–Ω–Ω–æ–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
@dp.message(lambda msg: msg.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def show_favorites_button(message: types.Message):
    await handle_show_favorites(message.from_user.id, message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
@dp.callback_query(lambda c: c.data.startswith("show_fav_"))
async def show_favorite_recipe(callback_query: types.CallbackQuery):
    try:
        recipe_name = callback_query.data.split("_", 2)[2]
        user_id = callback_query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –±–∞–∑—ã
        conn = await get_db()
        recipe = await conn.fetchrow(
            "SELECT recipe_text FROM favorites WHERE user_id = $1 AND recipe_name = $2",
            user_id, recipe_name
        )
        
        if recipe:
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                callback_data=f"del_fav_{recipe_name}"
            ))
            builder.add(types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                callback_data="back_to_favorites"
            ))
            
            await callback_query.message.edit_text(
                f"{recipe['recipe_text']}",
                reply_markup=builder.as_markup()
            )
        else:
            await callback_query.answer("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
    finally:
        if conn: await conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@dp.callback_query(lambda c: c.data == "back_to_favorites")
async def back_to_favorites(callback_query: types.CallbackQuery):
    await handle_show_favorites(callback_query.from_user.id, callback_query)

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
async def handle_show_favorites(user_id, message_or_callback):
    try:
        conn = await get_db()
        favorites = await conn.fetch(
            "SELECT recipe_name FROM favorites WHERE user_id = $1", 
            user_id
        )
        
        if not favorites:
            text = "–í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ."
            if isinstance(message_or_callback, types.CallbackQuery):
                await message_or_callback.message.edit_text(text)
            else:
                await message_or_callback.answer(text)
            return
            
        builder = InlineKeyboardBuilder()
        for idx, fav in enumerate(favorites, 1):
            builder.add(types.InlineKeyboardButton(
                text=f"{idx}. {fav['recipe_name']}",
                callback_data=f"show_fav_{fav['recipe_name']}"
            ))
        builder.adjust(2)
        
        text = "‚≠ê –í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:"
        if isinstance(message_or_callback, types.CallbackQuery):
            await message_or_callback.message.edit_text(
                text,
                reply_markup=builder.as_markup()
            )
        else:
            await message_or_callback.answer(
                text,
                reply_markup=builder.as_markup()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
        if isinstance(message_or_callback, types.CallbackQuery):
            await message_or_callback.message.answer(error_text)
        else:
            await message_or_callback.answer(error_text)
    finally:
        if conn: await conn.close()
        
@dp.callback_query(lambda c: c.data.startswith("add_fav_"))
async def add_to_favorites(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        recipe_name = callback_query.data.split("_", 2)[2]
        
        recipe_text = callback_query.message.text.split("\n\n")[-1]
        
        conn = await get_db()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        exists = await conn.fetchval(
            "SELECT 1 FROM favorites WHERE user_id = $1 AND recipe_name = $2",
            user_id, recipe_name
        )
        
        if exists:
            await callback_query.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
            return
            
        await conn.execute(
            "INSERT INTO favorites (user_id, recipe_name, recipe_text) VALUES ($1, $2, $3)",
            user_id, recipe_name, recipe_text
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(
            text="‚≠ê –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º",
            callback_data="already_fav"
        ))
        builder.row(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_list"
        ))
        
        await callback_query.message.edit_reply_markup(
            reply_markup=builder.as_markup()
        )
        await callback_query.answer(f"‚úÖ {recipe_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    finally:
        if conn: await conn.close()

@dp.callback_query(lambda c: c.data == "already_fav")
async def already_favorite(callback_query: types.CallbackQuery):
    await callback_query.answer("–≠—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç —É–∂–µ –≤ –≤–∞—à–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–º")

@dp.callback_query(lambda c: c.data.startswith("del_fav_"))
async def delete_favorite(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        recipe_name = callback_query.data.split("_", 2)[2]
        conn = await get_db()
        
        # –£–¥–∞–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        await conn.execute(
            "DELETE FROM favorites WHERE user_id = $1 AND recipe_name = $2",
            user_id, recipe_name
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        await callback_query.answer(f"‚ùå {recipe_name} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        await handle_show_favorites(user_id, callback_query)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç")
    finally:
        if conn: await conn.close()

@dp.callback_query(lambda c: c.data == "back_to_list")
async def back_to_list_handler(callback_query: types.CallbackQuery):
    try:
        await callback_query.message.delete()
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è")
        '''
        user_id = callback_query.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–≤—Ç—Ä–∞–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        breakfasts = user_data[user_id]['breakfasts']  # –ò–∑ —Ä–∞–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        
        builder = InlineKeyboardBuilder()
        for i, breakfast in enumerate(breakfasts, 1):
            builder.add(types.InlineKeyboardButton(
                text=f"{i}. {breakfast[:15] + '...' if len(breakfast) > 15 else breakfast}",
                callback_data=f"recipe_{i}"
            ))
        builder.adjust(2, 2, 2)
        
        builder.row(types.InlineKeyboardButton(
            text="üîÑ –ù–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
            callback_data="generate"
        ))
        
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏ –∑–∞–≤—Ç—Ä–∞–∫:\n" + "\n".join(f"{i}. {b}" for i, b in enumerate(breakfasts, 1)),
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞")
        '''
#endregion –ò–∑–±—Ä–∞–Ω–Ω–æ–µ

#region –û—Ç–∑—ã–≤—ã
@dp.message(lambda msg: msg.text == "üìù –û—Ç–∑—ã–≤")
async def ask_feedback(message: types.Message):
    markup = InlineKeyboardBuilder()
    markup.add(types.InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
        callback_data="cancel_feedback"
    ))
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:",
        reply_markup=markup.as_markup()
    )
    feedback_data[message.from_user.id] = True

@dp.callback_query(lambda c: c.data == "cancel_feedback")
async def cancel_feedback(callback: types.CallbackQuery):
    if callback.from_user.id in feedback_data:
        del feedback_data[callback.from_user.id]
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@dp.message(lambda message: message.from_user.id in feedback_data)
async def save_feedback(message: types.Message):
    user_id = message.from_user.id
    try:
        conn = await get_db()
        await conn.execute(
            "INSERT INTO feedbacks (user_id, username, text) VALUES ($1, $2, $3)",
            user_id, message.from_user.username, message.text
        )
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if conn: await conn.close()
        if user_id in feedback_data: 
            del feedback_data[user_id]  # –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ñ–ª–∞–≥
#endregion –û—Ç–∑—ã–≤—ã

#region –ó–∞–≤—Ç—Ä–∞–∫–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(lambda msg: msg.text == "üç≥ –í—ã–±—Ä–∞—Ç—å –∑–∞–≤—Ç—Ä–∞–∫–∏")
async def process_breakfast_message(message: types.Message):
    await handle_generate_breakfasts(message.from_user.id, message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(lambda c: c.data == "generate")
async def process_callback(callback_query: types.CallbackQuery):
    await handle_generate_breakfasts(callback_query.from_user.id, callback_query)

async def handle_generate_breakfasts(user_id, message_or_callback):
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if isinstance(message_or_callback, types.CallbackQuery):
            message = message_or_callback.message
            await message_or_callback.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≤—Ç—Ä–∞–∫–æ–≤...")
        else:
            message = message_or_callback
            await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≤—Ç—Ä–∞–∫–æ–≤...")

        loading_msg = await message.answer("üîÑ –ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...")
        
        breakfasts = await generate_breakfasts(user_id)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è user_data –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user_id not in user_data:
            user_data[user_id] = {}
        user_data[user_id]['breakfasts'] = breakfasts
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            await bot.delete_message(
                chat_id=message.chat.id,
                message_id=loading_msg.message_id
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        builder = InlineKeyboardBuilder()
        for i, breakfast in enumerate(breakfasts, 1):
            builder.add(types.InlineKeyboardButton(
                text=f"{i}. {breakfast}",
                callback_data=f"recipe_{i}"
            ))
        builder.add(types.InlineKeyboardButton(
            text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
            callback_data="generate"
        ))
        builder.adjust(2, 2, 2, 1)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏ –∑–∞–≤—Ç—Ä–∞–∫:\n" + "\n".join(f"{i}. {b}" for i, b in enumerate(breakfasts, 1)),
            reply_markup=builder.as_markup()
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_generate_breakfasts: {e}")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤—Ç—Ä–∞–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

#endregion –ó–∞–≤—Ç—Ä–∞–∫–∏

#region –†–µ—Ü–µ–ø—Ç—ã
@dp.callback_query(lambda c: c.data.startswith("recipe_"))
async def show_recipe(callback_query: types.CallbackQuery):
    await callback_query.answer("‚è≥ –ì–æ—Ç–æ–≤–∏–º —Ä–µ—Ü–µ–ø—Ç...")
    
    try:
        breakfast_num = int(callback_query.data.split("_")[1]) - 1  # "recipe_1" ‚Üí 0
    except (IndexError, ValueError):
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–≤—Ç—Ä–∞–∫–∞.")
        return

    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É user_data
    if user_id not in user_data:
        await callback_query.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞–∫–∏ –∑–∞–Ω–æ–≤–æ.")
        return

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ 'breakfasts' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ –°–ü–ò–°–û–ö
    if 'breakfasts' not in user_data[user_id] or not isinstance(user_data[user_id]['breakfasts'], list):
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤—Ç—Ä–∞–∫–∏ –∑–∞–Ω–æ–≤–æ.")
        return

    breakfasts = user_data[user_id]['breakfasts']  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≤—Ç—Ä–∞–∫–æ–≤

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ breakfasts –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–æ–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    if not breakfasts or not (0 <= breakfast_num < len(breakfasts)):
        await callback_query.message.answer(f"‚ùå –ù–µ—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. –î–æ—Å—Ç—É–ø–Ω–æ: {len(breakfasts)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    breakfast_name = breakfasts[breakfast_num]
    recipe = await generate_recipe(breakfast_name, user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    for i, breakfast in enumerate(breakfasts, 1):
        builder.add(types.InlineKeyboardButton(
            text=f"{i}. {breakfast[:15] + '...' if len(breakfast) > 15 else breakfast}",
            callback_data=f"recipe_{i}"
        ))
    builder.adjust(2, 2, 2)
    
    builder.row(types.InlineKeyboardButton(
        text="üîÑ –ù–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
        callback_data="generate"
    ))
    builder.row(types.InlineKeyboardButton(
        text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
        callback_data=f"add_fav_{breakfast_name}"
    ))
    
    await callback_query.message.answer(
        f"üç≥ {recipe}", 
        reply_markup=builder.as_markup()
    )
#endregion –†–µ—Ü–µ–ø—Ç—ã


async def generate_with_timeout(prompt, timeout=20):
    global current_model_index
    model = MODELS[current_model_index]
    
    for attempt in range(5):
        try:
            response = await asyncio.wait_for(
                g4f.ChatCompletion.create_async(
                    model=model,
                    messages=[{"role": "user", "content": prompt}],
                    timeout=timeout
                ),
                timeout=timeout
            )
            logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model}")
            return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {str(e)}")
            current_model_index = (current_model_index + 1) % len(MODELS)
            model = MODELS[current_model_index]
            await asyncio.sleep(1 if attempt == 0 else 0)

async def generate_breakfasts(user_id):
    try:
        try:
            conn = await get_db()
            current_allergies = await conn.fetchval(
                "SELECT allergies FROM user_preferences WHERE user_id = $1", 
                user_id
            )
            await conn.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ allergy in generate_breakfasts: {str(e)}")
            current_allergies = ""
        last_breakfasts = previous_breakfasts.get(user_id, [])
        prompt = (
            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–≤—Ç—Ä–∞–∫–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
            "1. –¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
            "2. –ö–∞–∂–¥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã\n"
            "3. –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: " 
            f"{current_allergies if current_allergies else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}\n"
            "4. –í –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —ç—Ç–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–∞–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ\n"
            f"{'5. –ò—Å–∫–ª—é—á–∏ —ç—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã: ' + ', '.join(last_breakfasts) if last_breakfasts else ''}\n"
            "6. –ù–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–ø–ø–µ—Ç–∏—Ç–Ω—ã–º–∏ –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏\n"
            "–§–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ1, –ù–∞–∑–≤–∞–Ω–∏–µ2, –ù–∞–∑–≤–∞–Ω–∏–µ3"
        )
        
        response = await generate_with_timeout(prompt)
        new_breakfasts = [b.strip() for b in response.split(',')[:6]]
        previous_breakfasts[user_id] = new_breakfasts
        return new_breakfasts
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤—Ç—Ä–∞–∫–æ–≤: {str(e)}")
        defaults = ["–û–º–ª–µ—Ç", "–ì—Ä–∞–Ω–æ–ª–∞", "–¢–æ—Å—Ç—ã —Å –∞–≤–æ–∫–∞–¥–æ", "–°–º—É–∑–∏-–±–æ—É–ª", "–û–≤—Å—è–Ω–∫–∞", "–°—ã—Ä–Ω–∏–∫–∏"]
        return [b for b in defaults if b not in last_breakfasts][:6] or defaults[:6]

async def generate_recipe(breakfast_name, user_id):
    try:
        conn = await get_db()
        
        allergies = await conn.fetchval(
            "SELECT allergies FROM user_preferences WHERE user_id = $1",
            user_id
        )
        allergies = allergies if allergies else ""
        
        prompt = (
            f"–ù–∞–ø–∏—à–∏ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è {breakfast_name}." +
            (f" –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–∞–ª–ª–µ—Ä–≥–µ–Ω—ã): {allergies}." if allergies else "") +
            "–ü—É–Ω–∫—Ç—ã –∫–æ—Ä–æ—Ç–∫–æ –∏ —è—Å–Ω–æ, –±–µ–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è (–±–µ–∑ markdown –∏–ª–∏ html)."
            )
        return await generate_with_timeout(prompt)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {str(e)}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    finally:
        if conn: await conn.close()



async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())